package youtubecheckin.core.com.akdeniz.googleplaycrawler;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.client.utils.URIBuilder;
import org.apache.http.entity.ByteArrayEntity;
import org.apache.http.entity.StringEntity;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.util.EntityUtils;
import youtubecheckin.core.com.akdeniz.googleplaycrawler.GooglePlay.*;
import youtubecheckin.core.com.akdeniz.googleplaycrawler.GooglePlay.BulkDetailsRequest.Builder;
import youtubecheckin.core.com.akdeniz.googleplaycrawler.misc.Base64;

import javax.crypto.Cipher;
import java.io.IOException;
import java.math.BigInteger;
import java.net.URI;
import java.security.Key;
import java.security.KeyFactory;
import java.security.MessageDigest;
import java.security.PublicKey;
import java.security.spec.RSAPublicKeySpec;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CompletableFuture;

import static java.nio.charset.StandardCharsets.UTF_8;
import static youtubecheckin.core.com.akdeniz.googleplaycrawler.Identity.convertToMapLayout;

/**
 * This class provides
 * <code>checkin, search, details, bulkDetails, browse, list and download</code>
 * capabilities. It uses <code>Apache Commons HttpClient</code> for POST and GET
 * requests.
 *
 * <p>
 * <b>XXX : DO NOT call checkin, login and download consecutively. To allow
 * server to catch up, sleep for a while before download! (5 sec will do!) Also
 * it is recommended to call checkin once and use generated android-id for
 * further operations.</b>
 * </p>
 *
 * @author akdeniz
 */
public class GooglePlayAPI {

  private static final String YOUTUBE_AUTH_URL = "https://youtubei.googleapis.com/youtubei/v1/account/accounts_list?key=AIzaSyA8eiZmM1FaDVjRy-df2KTyQ_vz_yYM39w";
  private static final String YOUTUBE_AUTH_PAYLOAD = "{\"context\":{\"client\":{\"clientName\":\"ANDROID\",\"clientVersion\":\"16.24\",\"acceptRegion\":\"US\",\"experimentsToken\":\"GgIQAA%3D%3D\",\"deviceMake\":\"Samsung\",\"deviceModel\":\"SM-G955F\",\"platform\":\"MOBILE\"},\"request\":{\"consistencyTokenJars\":[]},\"user\":{\"enableSafetyMode\":false}}}";
  private static final String URL_LOGIN = "https://android.googleapis.com/auth";

  private static final String ACCOUNT_TYPE_HOSTED_OR_GOOGLE = "HOSTED_OR_GOOGLE";

  private String continueUrl;
  private String services;
  private String aas_et;
  private String token;
  private String androidID;
  private String email;
  private String password;
  private HttpClient client;
  private String securityToken;
  private String localization;
  private String useragent;

  /**
   * If this constructor is used, Android ID must be generated by calling
   * <code>checkin()</code> or set by using <code>setAndroidID</code> before
   * using other abilities.
   */
  public GooglePlayAPI(String email, String password) {
    this.setEmail(email);
    this.password = password;
    setUseragent("Android-Finsky/13.1.32-all (versionCode=81313200,sdk=24,device=dream2lte,hardware=dream2lte,product=dream2ltexx,build=NRD90M:user)");
  }

  /**
   * Authenticates on server with given email and password and sets
   * authentication token. This token can be used to login instead of using
   * email and password every time.
   */
  public void login() throws Exception {
    Identity ident = Identity.signIn(getClient(), getEmail(), password);
    aas_et = ident.getAas_et();
    services = ident.getServices();
    continueUrl = ident.getContinueUrl();
    setToken(ident.getAuthToken());
  }

  public CompletableFuture<String> youtubeLogin() throws Exception {
    CompletableFuture<String> future = new CompletableFuture<>();
    String accessToken = exchangeAccessToken();
    HttpEntity entity = executePost(YOUTUBE_AUTH_URL, YOUTUBE_AUTH_PAYLOAD, new String[][]{
        {"Authorization", "Bearer " + accessToken}
    });
    future.complete(EntityUtils.toString(entity));
    return future;
  }

  private String exchangeAccessToken() throws Exception {
    HttpEntity httpEntity = executePost(new URIBuilder(URL_LOGIN)
        .addParameter("app", "com.google.android.youtube")
        .addParameter("client_sig", "24bb24c05e47e0aefa68a58a766179d9b613a600")
        .addParameter("google_play_services_version", "214516005")
        .addParameter("service", "oauth2:https://www.googleapis.com/auth/youtube")
        .addParameter("Token", aas_et)
        .build()
    );
    return convertToMapLayout(EntityUtils.toString(httpEntity, UTF_8)).get("Auth");
  }

  /* =======================Helper Functions====================== */

  /**
   * Executes POST request on given URL with POST parameters and header
   * parameters.
   */
  private HttpEntity executePost(String url, String[][] postParams, String[][] headerParams) throws IOException {

    List<NameValuePair> formparams = new ArrayList<NameValuePair>();

    for (String[] param : postParams) {
      if (param[0] != null && param[1] != null) {
        formparams.add(new BasicNameValuePair(param[0], param[1]));
      }
    }

    UrlEncodedFormEntity entity = new UrlEncodedFormEntity(formparams, "UTF-8");

    return executePost(url, entity, headerParams);
  }

  /**
   * Executes POST request on given URL with {@link HttpEntity} typed POST
   * parameters and header parameters.
   */
  private HttpEntity executePost(String url, HttpEntity postData,
                                 String[][] headerParams) throws IOException {
    HttpPost httppost = new HttpPost(url);

    if (headerParams != null) {
      for (String[] param : headerParams) {
        if (param[0] != null && param[1] != null) {
          httppost.setHeader(param[0], param[1]);
        }
      }
    }

    httppost.setEntity(postData);

    return executeHttpRequest(httppost);
  }

  private HttpEntity executePost(URI url) throws IOException {
    HttpPost httppost = new HttpPost(url);

    return executeHttpRequest(httppost);
  }

  private HttpEntity executePost(String url, String payload, String[][] headerParams) throws IOException {
    HttpPost httppost = new HttpPost(url);

    if (headerParams != null) {
      for (String[] param : headerParams) {
        if (param[0] != null && param[1] != null) {
          httppost.setHeader(param[0], param[1]);
        }
      }
    }

    StringEntity entity = new StringEntity(payload, "UTF-8");
    httppost.setEntity(entity);

    return executeHttpRequest(httppost);
  }

  /**
   * Executes given GET/POST request
   */
  private HttpEntity executeHttpRequest(HttpUriRequest request) throws IOException {

    HttpResponse response = getClient().execute(request);

    if (response.getStatusLine().getStatusCode() != 200) {
      throw GooglePlayException.create(response);
    }

    return response.getEntity();
  }

  public String getContinueUrl() {
    return continueUrl;
  }

  public String getServices() {
    return services;
  }

  public String getAas_et() {
    return aas_et;
  }

  public String getToken() {
    return token;
  }

  public void setToken(String token) {
    this.token = token;
  }

  public String getAndroidID() {
    return androidID;
  }

  public void setAndroidID(String androidID) {
    this.androidID = androidID;
  }

  public String getSecurityToken() {
    return securityToken;
  }

  public void setSecurityToken(String securityToken) {
    this.securityToken = securityToken;
  }

  public HttpClient getClient() {
    return client;
  }

  /**
   * Sets {@link HttpClient} instance for internal usage of GooglePlayAPI. It is
   * important to note that this instance should allow concurrent connections.
   *
   * @param client
   */
  public void setClient(HttpClient client) {
    this.client = client;
  }

  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }

  public String getLocalization() {
    return localization;
  }

  /**
   * Localization string that will be used in each request to server. Using this
   * option you can fetch localized informations such as reviews and
   * descriptions.
   * <p>
   * Note that changing this value has no affect on localized application list
   * that server provides. It depends on only your IP location.
   * <p>
   *
   * @param localization can be <b>en-EN, en-US, tr-TR, fr-FR ... (default : en-EN)</b>
   */
  public void setLocalization(String localization) {
    this.localization = localization;
  }

  /**
   * @return the useragent
   */
  public String getUseragent() {
    return useragent;
  }

  /**
   * @param useragent the useragent to set
   */
  public void setUseragent(String useragent) {
    this.useragent = useragent;
  }

}
